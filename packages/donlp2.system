;;; -*- Mode: Lisp -*-

(defun donlp2-compiler (filename &rest args)
  (apply #'f2cl:f2cl-compile filename args))

(mk:define-language :f2cl
    :compiler #'donlp2-compiler
    :source-extension "f")

(mk:defsystem ex-antenna1
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "antenna1"
		    :compiler-options (:declare-common t))))))

(mk:defsystem ex-hs101
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "hs101"
		    :compiler-options (:declare-common t))))))

(mk:defsystem ex-hs102
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "hs102"
		    :compiler-options (:declare-common t))))))

(mk:defsystem ex-hs103
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "hs103"
		    :compiler-options (:declare-common t))))))

(mk:defsystem ex-amplqp
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "amplqp"
		    :compiler-options (:declare-common t))))))

;; Output is messed up a bit, but the final results match the Fortran
;; code results.
(mk:defsystem ex-alkylati
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "alkylati"
		    :compiler-options (:declare-common t))))))

;; Runs ok, but the optimal F and solution X are somewhat different.
;; The multipliers are quite a bit different. and the number of
;; evaluations are too.
(mk:defsystem ex-fractf77new
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "fractf77new"
		    :compiler-options (:declare-common t))))))

;; Works just fine.
(mk:defsystem ex-girder
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "girder"
		    :compiler-options (:declare-common t))))))

;; This incompatibly defines the common block o8xdat, so this won't
;; work until that is fixed, if possible.
(mk:defsystem ex-chemequi
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "chemequi"
		    :compiler-options (:declare-common t))))))

;; F2cl can't convert nested implied do loops.
(mk:defsystem ex-boxparam
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "boxparam"
		    :compiler-options (:declare-common t))))))

;; F2cl can't convert nested implied do loops.
(mk:defsystem ex-betting
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("donlp2")
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "betting"
		    :compiler-options (:declare-common t))))))



(mk:defsystem donlp2
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :components
  ((:module donlp2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    (
	     (:file "support.lisp"
		    :language :lisp)
	     ;; Default dummy routines.  These are default versions
	     ;; that the user can modify.
	     (:file "eval_extern")
	     (:file "user_eval")
	     (:file "solchk")
	     ;;(:file "dummy-usr")
	     ;; The core donlp2 routines.
	     (:file "donlp2"
		    :compiler-options (:declare-common t)
		    :depends-on ("esgradf"
				 "esgradh"
				 "esgradg"
				 "o8vecn"
				 ))
	     (:file "o8st"
		    :depends-on ("esg"
				 "esh"
				 "o8msg"))
	     (:file "o8fin")
	     (:file "o8info"
		    :depends-on ("o8mdru"))
	     (:file "o8sce")
	     (:file "o8bfgs"
		    :depends-on ("o8sc2"
				 "o8vecn"
				 "o8msg"
				 "o8sc3"
				 "o8sc1"
				 "o8upd"))
	     (:file "o8shms")
	     (:file "o8msg")
	     (:file "o8opti"
		    :compiler-options (:byte-compile t)
		    :depends-on ("esh"
				 "esgradh"
				 "esg"
				 "esgradg"
				 "o8vecn"
				 "esf"
				 "esgradf"
				 "o8left"
				 "o8ht"
				 "o8sol"
				 "o8dec"
				 "o8ht"
				 "o8solt"
				 "o8rght"
				 "esh"
				 "esg"
				 "o8unim"
				 "o8egph"))
	     (:file "o8inim")
	     (:file "o8dird"
		    :depends-on ("o8sc1"
				 "o8sc3"))
	     (:file "o8cutd"
		    :depends-on ("o8vecn"
				 "o8sc1"))
	     (:file "o8smax")
	     (:file "o8rest")
	     (:file "o8save")
	     (:file "o8eval"
		    :depends-on ("esh"
				 "esg"
				 "esf"))
	     (:file "o8unim"
		    :depends-on ("o8eval" "o8rest" "o8save"))
	     (:file "o8sc1")
	     (:file "o8sc2")
	     (:file "o8sc3")
	     (:file "o8mdru")
	     (:file "o8egph")
	     (:file "o8dec"
		    :depends-on ("o8left"
				 "o8ht"
				 "o8vecn"))
	     (:file "o8ht")
	     (:file "o8sol")
	     (:file "o8solt")
	     (:file "o8dsq1")
	     (:file "o8upd"
		    :depends-on ("o8left"
				 "o8dsq1"))
	     (:file "o8rght")
	     (:file "o8left")
	     (:file "o8vecn")
	     (:file "o8qpdu"
		    :compiler-options (:declare-common t)
		    :depends-on ("o8rinv"
				 "o8zup"
				 "o8rup"
				 "o8dlcd"))
	     (:file "o8zup")
	     (:file "o8rup")
	     (:file "o8dlcd")
	     (:file "o8adcd")
	     (:file "o8rinv")
	     (:file "esf")
	     (:file "esgradf"
		    :depends-on ())
	     (:file "esh")
	     (:file "esgradh"
		    :depends-on ())
	     (:file "esg")
	     (:file "esgradg")
))))
