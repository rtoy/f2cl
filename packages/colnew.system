;;; -*- Mode: lisp; Package: CL-USER -*-


;;; Defsystem for COLNEW.  Everything should compile, but the result
;;; is untested.
(in-package #:cl-user)

(require :f2cl)

(mk:define-language :f2cl
    :compiler #'f2cl:f2cl-compile
    :source-extension "f")

(defparameter *colnew-root*
  (make-pathname :host (pathname-host *load-pathname*)
		 :directory (pathname-directory *load-pathname*)))

;; Defsystem for colnew.
(mk:defsystem colnew
  :source-pathname *colnew-root*
  :components
  ((:module colnew
	    :source-extension "f"
	    :language :f2cl
	    :compiler-options (:common-as-array t)
	    :components
	    (
	     ;; Linpack routines needed by colnew
	     (:file "dgesl"
		    :depends-on ("daxpy" "ddot"))
	     (:file "dgefa"
		    :depends-on ("idamax" "dscal" "daxpy"))
	     ;; BLAS routines needed by above
	     (:file "daxpy")
	     (:file "ddot")
	     (:file "dscal")
	     (:file "idamax")
	     ;; Simple compatibility to define all of the needed
	     ;; common blocks in one place.
	     (:file "compat"
		    :compiler-options (:declare-common t :common-as-array t))
	     ;; COLNEW itself, broken down into one subroutine per
	     ;; file.
	     (:file "colnew"
		    :depends-on ("compat" "consts" "newmsh" "contrl"))
	     (:file "contrl"
		    :depends-on ("compat" "lsyslv" "skale" "errchk" "newmsh"))
	     (:file "skale"
		    :depends-on ("compat"))
	     (:file "newmsh"
		    :depends-on ("compat" "approx" "horder"))
	     (:file "consts"
		    :depends-on ("compat" "vmonde" "rkbas"))
	     (:file "errchk")
	     (:file "lsyslv"
		    :depends-on ("compat" "vwblok" "gblock" "gderiv" "fcblok"
					  "sbblok" "dmzsol"))
	     (:file "gderiv")
	     (:file "vwblok"
		    :depends-on ("compat" "dgesl" "dgefa"))
	     (:file "gblock"
		    :depends-on ("compat" "dgesl"))
	     (:file "appsln")
	     (:file "approx"
		    :depends-on ("compat"))
	     (:file "rkbas"
		    :depends-on ("compat"))
	     (:file "vmonde"
		    :depends-on ("compat"))
	     (:file "horder")
	     (:file "dmzsol"
		    :depends-on ("factrb" "shiftb"))
	     (:file "fcblok"
		    :depends-on ("factrb" "shiftb"))
	     (:file "factrb")
	     (:file "shiftb")
	     (:file "sbblok"
		    :depends-on ("subfor" "subbak"))
	     (:file "subfor")
	     (:file "subbak")))))

;; Test problem 1 from TOMS 569.
;;
;; Run (*main*).  Appears to work since the error tolerance is satisfied. 
(mk:defsystem colnew-test-1
  :source-pathname (merge-pathnames (make-pathname :directory '(:relative "colnew"))
				    *colnew-root*)
  :depends-on ("colnew")
  :components
  ((:module problem-1
	    :source-extension "f"
	    :language :f2cl
	    :compiler-options (:common-as-array t)
	    :components
	    ((:file "prob1"
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "exact"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "exact")))))

;; Test problem 2 from TOMS 569.  Appears to work.
(mk:defsystem colnew-test-2
  :source-pathname (merge-pathnames (make-pathname :directory '(:relative "colnew"))
				    *colnew-root*)
  :depends-on ("colnew")
  :components
  ((:module problem-2
	    :source-extension "f"
	    :language :f2cl
	    :components
	    ((:file "prob2"
		    :compiler-options (:declare-common t)
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "solutn"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "solutn")))))


;; Test problem 3 from TOMS 569.
(mk:defsystem colnew-test-3
  :source-pathname (merge-pathnames (make-pathname :directory '(:relative "colnew"))
				    *colnew-root*)
  :depends-on ("colnew")
  :components
  ((:module problem-3
	    :source-extension "f"
	    :language :f2cl
	    :components
	    ((:file "prob3"
		    :compiler-options (:declare-common t)
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "solutn"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "solutn")))))


;;; System to convert the Fortran code to Lisp

(mk:define-language :f2cl-lisp
    :compiler #'f2cl:f2cl
    :loader #'identity
    :source-extension "f"
    :binary-extension "lisp")

(mk:defsystem colnew-lisp
  :source-pathname *colnew-root*
  :components
  ((:module colnew
	    :source-extension "f"
	    :binary-pathname "colnew/lib/"
	    :language :f2cl-lisp
	    :compiler-options (:common-as-array t :package :colnew)
	    :compile-only t
	    :components
	    (
	     ;; Linpack routines needed by colnew
	     (:file "dgesl"
		    :depends-on ("daxpy" "ddot"))
	     (:file "dgefa"
		    :depends-on ("idamax" "dscal" "daxpy"))
	     ;; BLAS routines needed by above
	     (:file "daxpy")
	     (:file "ddot")
	     (:file "dscal")
	     (:file "idamax")
	     ;; Simple compatibility to define all of the needed
	     ;; common blocks in one place.
	     (:file "compat"
		    :compiler-options (:declare-common t :common-as-array t
						       :package :colnew))
	     ;; COLNEW itself, broken down into one subroutine per
	     ;; file.
	     (:file "colnew"
		    :depends-on ("compat" "consts" "newmsh" "contrl"))
	     (:file "contrl"
		    :depends-on ("compat" "lsyslv" "skale" "errchk" "newmsh"))
	     (:file "skale"
		    :depends-on ("compat"))
	     (:file "newmsh"
		    :depends-on ("compat" "approx" "horder"))
	     (:file "consts"
		    :depends-on ("compat" "vmonde" "rkbas"))
	     (:file "errchk")
	     (:file "lsyslv"
		    :depends-on ("compat" "vwblok" "gblock" "gderiv" "fcblok"
					  "sbblok" "dmzsol"))
	     (:file "gderiv")
	     (:file "vwblok"
		    :depends-on ("compat" "dgesl" "dgefa"))
	     (:file "gblock"
		    :depends-on ("compat" "dgesl"))
	     (:file "appsln")
	     (:file "approx"
		    :depends-on ("compat"))
	     (:file "rkbas"
		    :depends-on ("compat"))
	     (:file "vmonde"
		    :depends-on ("compat"))
	     (:file "horder")
	     (:file "dmzsol"
		    :depends-on ("factrb" "shiftb"))
	     (:file "fcblok"
		    :depends-on ("factrb" "shiftb"))
	     (:file "factrb")
	     (:file "shiftb")
	     (:file "sbblok"
		    :depends-on ("subfor" "subbak"))
	     (:file "subfor")
	     (:file "subbak")))
   (:module problem-1
	    :source-extension "f"
	    :source-pathname "colnew/problem-1"
	    :language :f2cl-lisp
	    :compiler-options (:common-as-array t :package :colnew)
	    :compile-only t
	    :depends-on (colnew)
	    :components
	    ((:file "prob1"
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "exact"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "exact")))
   (:module problem-2
	    :source-extension "f"
	    :source-pathname "colnew/problem-2"
	    :language :f2cl-lisp
	    :compiler-options (:common-as-array t :package :colnew)
	    :compile-only t
	    :depends-on (colnew)
	    :components
	    ((:file "prob2"
		    :compiler-options (:declare-common t :package :colnew)
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "solutn"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "solutn")))
   (:module problem-3
	    :source-extension "f"
	    :source-pathname "colnew/problem-3"
	    :language :f2cl-lisp
	    :compiler-options (:common-as-array t :package :colnew)
	    :compile-only t
	    :depends-on (colnew)
	    :components
	    ((:file "prob3"
		    :compiler-options (:declare-common t :package :colnew)
		    :depends-on ("fsub" "dfsub" "gsub" "dgsub" "solutn"))
	     (:file "fsub")
	     (:file "gsub")
	     (:file "dfsub")
	     (:file "dgsub")
	     (:file "solutn")))))
