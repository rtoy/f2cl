;;; -*- Mode: lisp -*-
;;;
;;;
;;; $Id$
;;; $Log$
;;; Revision 1.8  2008/09/15 02:27:34  rtoy
;;; Instead of compiling and using the Fortran version of machar, use the
;;; Lisp version.  Some x86 systems can't run machar correctly, due to the
;;; 80-bit floats used internally, even though double-floats are used.
;;;
;;; Revision 1.7  2008/08/25 16:54:08  rtoy
;;; o Get rid of the logical pathname translations.
;;; o Define *TOMS715-ROOT* to hold the directory containing
;;;   the source code for TOMS 715.
;;;
;;; Revision 1.6  2008/02/26 18:43:52  rtoy
;;; Clean up logical pathname.
;;;
;;; Revision 1.5  2006/04/28 01:12:58  rtoy
;;; Use *load-pathname to construct the source path (f2cl.system) or a
;;; logical pathname to use in the defsystems so that each defsystem can
;;; find its own files.
;;;
;;; Revision 1.4  2002/01/13 16:29:52  rtoy
;;; Some of the dependencies were wrong.
;;;
;;; Revision 1.3  2000/08/18 17:55:07  rtoy
;;; Use the right package for f2cl-compile.
;;;
;;; Revision 1.2  2000/08/07 17:02:29  rtoy
;;; Comment out unused functions, make it more palatable to Clisp logical
;;; pathnames, add some dependencies.
;;;
;;; Revision 1.1  2000/07/21 22:13:48  rtoy
;;; Initial version.
;;;

(defparameter *toms715-root*
  (merge-pathnames
   #P"toms/715"
   (make-pathname :host (pathname-host *load-pathname*)
		  :directory (pathname-directory *load-pathname*))))

(mk:define-language :f2cl
    :compiler #'f2cl:f2cl-compile
    :source-extension "f")

;;   On some (all?) x86 systems, machar doesn't correctly compute the
;;   desired values.  This is due to the 80-bit floats on x86.
;;   Non-x86 systems or x86 systems using SSE2 for floats can probably
;;   compile and run the Fortran version without problems.
(mk:defsystem machar
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :source-extension "lisp"
  :components
  ((:file "machar")))

(mk:defsystem toms715
    :source-pathname *toms715-root*
    :source-extension "f"
    :language :f2cl
    :depends-on ("machar")
    :components
    ((:module "715"
	      :source-pathname ""
	      :binary-pathname ""
	      :components
	      (
	       (:file "anorm")
	       (:file "besei0" :depends-on ("calci0"))
	       (:file "besei1" :depends-on ("calci1"))
	       (:file "besek0" :depends-on ("calck0"))
	       (:file "besek1" :depends-on ("calck1"))
	       (:file "besi0" :depends-on ("calci0"))
	       (:file "besi1" :depends-on ("calci1"))
	       (:file "besj0" :depends-on ("caljy0"))
	       (:file "besj1" :depends-on ("caljy1"))
	       (:file "besk0" :depends-on ("calck0"))
	       (:file "besk1" :depends-on ("calck1"))
	       (:file "besy0" :depends-on ("caljy0"))
	       (:file "besy1" :depends-on ("caljy1"))
	       (:file "calcei")
	       (:file "calci0")
	       (:file "calci1")
	       (:file "calck0")
	       (:file "calck1")
	       (:file "calerf")
	       (:file "caljy0")
	       (:file "caljy1")
	       (:file "daw")
	       (:file "derf")
	       (:file "derfc")
	       (:file "derfcx")
	       (:file "dgamma")
	       (:file "dlgama")
	       (:file "dsubn")
	       (:file "ei")
	       (:file "eone")
	       (:file "expei")
	       ;; Use the Lisp equivalent.
	       ;;(:file "machar")
	       (:file "psi")
	       (:file "ren")
	       (:file "ribesl")
	       (:file "rjbesl")
	       (:file "rkbesl")
	       (:file "rybesl")
	       ))))

;; Tests for TOMS 715.  The tests have the same name as the file
;; listed below.  Hence to run the J0 test, run (j0test).
(mk:defsystem toms715-tests
    :source-pathname *toms715-root*
    :source-extension "f"
    :language :f2cl
    :depends-on ("toms715")
    :components
    ((:module "tests"
	      :source-pathname ""
	      :binary-pathname ""
	      :source-extension "f"
	      :language :f2cl
	      :components
	      (
	       (:file "algtst")
	       (:file "anrtst")
	       (:file "dawtst")
	       (:file "eitest")
	       (:file "erftst")
	       (:file "gamtst")
	       (:file "i0test")
	       (:file "i1test")
	       (:file "j0test")
	       (:file "j1test")
	       (:file "k0test")
	       (:file "k1test")
	       (:file "psitst")
	       (:file "ritest")
	       (:file "rjtest")
	       (:file "rktest")
	       (:file "rytest")
	       (:file "y0test")
	       (:file "y1test")
	       ))))

